------------------------------------------------------------------------------
BACKGROUND
------------------------------------------------------------------------------

Impetus for the project was provided by a desire to use smbclient to publish
files on a Windows Server 2012 R2 share.  SCO-build samba 3.0.14a or 3.0.20a
releases do not support use of the SMB1 protocol disabled by default on newer
servers.  As the SMB1 protocol has severe vulnerabilities, enabling SMB1 was
not considered an option.

samba 3.6.x was the first version to support SMB2, so it was selected for
this effort, in part, because building top-of-tree versions of complex
software is often difficult for sco3.2v5.0.7 systems.

NOTE:  Version 4.x.x was not considered due to its use of the waf build system
       written in python.  At the time, python was not built on the project's
       sco3.2v5.0.7 build system, though later it was determined that building
       Python 2.5.6 was possible, and that Samba presently only requires
       Python 2.4.2 or later.

Initial effort involved use of samba-3.6.0.tar sources, but some difficulty
was encountered, so for a more in-depth build attempt, development moved to
use of the samba-3.6.25.tar release.

Upon the eventual successful building of source3/bin/smbclient, this project
was created publically share the modifications used to build the project on
sco3.2v5.0.7.

------------------------------------------------------------------------------
USE OF GNULIB
------------------------------------------------------------------------------

Once all compilation issues were resolved, the link by `make bin/smbclient`
failed due to lack of a strtoull function.  Build was only possible at all
when CFLAGS included -DHAVE_STRTOLL and -DHAVE_STRTULL.  Though the system
/usr/lib/libstdc++.so.4.0.1 and /usr/lib/libc-2.3.2.so shared objects did
contain plain-text strings "strtoll" and "strtoull" in what appeared to be
lists of exported functions, /usr/include headers did not mention them.

The project opted to supply strtoull() via gnulib rather than to address why
lib/replace/replace.c workarounds failed to work.  This fork, therefore, adds
related gnulib source files not present in the original project, and some
changes to autotools *.in files.

gnulib version:

gnulib-tool (GNU gnulib 2018-05-16)
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Import command:

gnulib-tool --import strtoull

------------------------------------------------------------------------------
CAVEATS
------------------------------------------------------------------------------

This fork of the samba project modifies only the v3.6-stable branch for the
express purpose of improving compilation on sco3.2v5.0.7 operating systems.

This project (presently) aims only to tackle issues related to building and
using source3/bin/smbclient to interact with shares published by other
systems.  No attempt is made to build samba for use as a server.

Modifications to the v3.6-stable branch were made to expediciously produce a
sco3.2v5.0.7 binary.  Very little attempt was made to assure applicability
of the changes to other build platforms, and no attempt was made to assure
other builds were not broken.

While autotool *.in file modifications, particularly those related to import
of gnulib's strtoull, were viable for purposes of building on sco3.2v5.0.7, no
attempt was made to be sure the additions would not impact build on other
platforms.

------------------------------------------------------------------------------
LICENSE
------------------------------------------------------------------------------

All modifications to the original Samba project source are released under the
same licence that the Samba project uses (GPLv3 per README.contributing).

As the gnulib source license is GNU GPL version 3 or later, the added gnulib
sources are license compatible with the original source tree.

The source3/lib/util.c patch for the S_ISSCOK macro was derived from a source
file already deployed on the sco3.2v5.0.7 system that contained the following
copyright and license statement:

/* @(#)statdefs.h       1.9 03/06/15 Copyright 1998 J. Schilling */
/*
 *      Definitions for stat() file mode
 *
 *      Copyright (c) 1998 J. Schilling
 */
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.

All modifications made by this project are therefore considered licensed under
the same version of the GPL that applies to the Samba project sources it is
based on since this satisfies requirements of all code used from other
sources.

------------------------------------------------------------------------------
TOOLS
------------------------------------------------------------------------------

The project build system is based on the following vendor-supplied packages:

  Extended Shells (ver 1.4.1Ab)
  FSUpthreads - POSIX 1003.1c threads implementation (ver 3.14)
  GNU Development Tools (ver 5.0.7Kj)
  GNU Development Tools (ver 5.0.7g)
  Java 2 1.3.1_22 Plugin (ver 1.3.1Va)
  Java 2 1.3.1_22 Runtime Environment (ver 1.3.1Va)
  Java 2 1.3.1_22 Software Development Kit (ver 1.3.1Va)
  SCO OpenServer Development System (ver 5.2.0Aa)
  SCO OpenServer Enterprise System (ver 5.0.7Hw)
  patchck - package management tool (ver 18051503)
  OSS672A - OpenServer 5 Network Header File Update (ver 1.0.0)
  OSS673A - OSR 5.0.7 SCSI Floppy Driver supplement (ver 1.0.0)
  P535239A - pmd security fix (ver 1.0.0)
  SCO OpenServer Release 5.0.7 Maintenance Pack 5 (ver 1.0.0Mc)

For purposes of building more current revisions of free and open source
projects than were supplied by the vendor, a number of build tools were
updated by building statically linked binaries and deploying then to the
developer's home directory.  In most cases, configuring build of the tools
was as simple as issuing the following ./configure command:

  CONFIG_SHELL=$(which bash) ./configure CONFIG_SHELL=$(which bash) \
    -C --prefix="${HOME}"

Additional environment variables were set as follows:

  ACCEPT_INFERIOR_RM_PROGRAM=yes
  export ACCEPT_INFERIOR_RM_PROGRAM
  CPATH=${HOME}/include
  export CPATH
  CFLAGS="-static"
  export CFLAGS
  PKG_CONFIG_PATH=${HOME}/lib/pkgconfig
  export PKG_CONFIG_PATH

Build tools in the developers bin folder are PATHed before vendor-supplied
tools, and include:

* aclocal (GNU automake) 1.14
* aclocal (GNU automake) 1.15
* aclocal (GNU automake) 1.9.6
* autoconf (GNU Autoconf) 2.69
* autoheader (GNU Autoconf) 2.69
* autom4te (GNU Autoconf) 2.69
* automake (GNU automake) 1.14
* automake (GNU automake) 1.15
* automake (GNU automake) 1.9.6
* autoreconf (GNU Autoconf) 2.69
* autoscan (GNU Autoconf) 2.69
* autoupdate (GNU Autoconf) 2.69
* grep (GNU grep) 2.25
* ifnames (GNU Autoconf) 2.69
* libtoolize (GNU libtool) 1.5.24
* m4 (GNU M4) 1.4.9
* GNU Make 3.82
* Python 2.5.6

GCC 3.4.6 was also built and present but the vendor-supplied gcc 2.95.3 was
used for this project.

------------------------------------------------------------------------------
BUILD
------------------------------------------------------------------------------

In its final state, the project is known to build with the following process:

* Browse to https://github.com/kbulgrien/smbclient-3.6.26-sco3.2v5.0.7
* Verify that the v3-6-stable branch is selected.
* Pull down the "Clone or download" control.
* Use "Download Zip" to get smbclient-3.6.26-sco3.2v5.0.7-3-6-stable.zip
* Put smbclient-3.6.26-sco3.2v5.0.7-3-6-stable.zip on a build system.
* Unzip the sources and make bin/smbmount.  For example:

  $ cd ${HOME}
  $ unzip smbclient-3.6.26-sco3.2v5.0.7-3-6-stable.zip

* Build smbclient.  For example:

  $ cd ${HOME}/smbclient-3.6.26-sco3.2v5.0.7-3-6-stable/source3
  $ ./autogen.sh
  $ CONFIG_SHELL=$(which bash) CC=$(which gcc) CFLAGS="-static -DHAVE_DLOPEN \
    -DHAVE_DLSYM -DHAVE_DLCLOSE -DHAVE_DLERROR -DHAVE_STRTOLL \
    -DHAVE_STRTOULL" ./configure CONFIG_SHELL=$(which bash) \
    -C --prefix="/usr/local"
  $ make bin/smbclient

------------------------------------------------------------------------------
INSTALL
------------------------------------------------------------------------------

To deploy the newly built smbclient, only the smbclient binary is required,
but to avoid an error message under certain circumstances, also create an
smb.conf file.  For example:

$ cp -p bin/smbclient /usr/local/bin
$ cp -p ../examples/smb.conf.default /usr/local/lib/smb.conf

While it is NOT necessary to have a vendor-supplied samba package installed
for this smbclient binary to work, using the ./configure --prefix="/usr/local"
argument specified in the BUILD commands should obviate a need to overwrite a
pre-existing smbclient binary on a target system in the event that it already
has a vendor-supplied samba package pre-installed (i.e. "Samba x.x.xxx File
and Print Server (ver x.xx.xxxx)").

